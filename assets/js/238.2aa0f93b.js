(window.webpackJsonp=window.webpackJsonp||[]).push([[238],{831:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"集合框架中的接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集合框架中的接口"}},[t._v("#")]),t._v(" 集合框架中的接口")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("除了类集接口之外，类集也是用 Comparator ， Iterator 和 ListIterator 接口。")])]),t._v(" "),a("li",[a("p",[t._v("简单地说， Comparator 接口定义了两个对象如何比较；Iterator 和 ListIterator 接口枚举类集中的对象。")])]),t._v(" "),a("li",[a("p",[t._v("为了在他们的使用中提供最大的灵活性，类集接口允许对一些方法进行选择。可选择的方法使得使用者可以更改类集中的内容。支持这些方法额类集被称为可修改的（modifiable）。不允许修改其内容的类集被称为不可修改的（unmodifiable）。如果对一个不可修改发类集使用这些方法，将引发一个 UnsupportedOperationException 异常。 "),a("strong",[t._v("所有内置的类集都是可修改的")]),t._v(" 。")])]),t._v(" "),a("li",[a("p",[t._v("调用 "),a("code",[t._v("add()")]),t._v("​​​ 方法可以将对象加入类集，注意 add() 带一个 Object 类的参数。因为 Object 是所有类的超类，所以任何类型的对象都可以被存储在一个类集中。然而原始类型 "),a("strong",[t._v("不行")]),t._v(" 。例如，一个类集不能直接存储类型 int ，char ， double 等的值。如果想存储这些对象，也可以使用原始类型包装器。")]),t._v(" "),a("p",[t._v("可以调用 "),a("code",[t._v("addAll()")]),t._v("​​​ 方法将一个类集的全部内容增加到另一个类集中。")])]),t._v(" "),a("li",[a("p",[t._v("可以通过调用 "),a("code",[t._v("remove()")]),t._v("​​​ 方法将一个对象删除。为了删除一组对象，可以调用 "),a("code",[t._v("removeAll()")]),t._v("​​​ 方法。调用 "),a("code",[t._v("retainAll()")]),t._v("​​​ 方法可以将除了一组指定的元素之外的所有元素删除。为了清空类集，可以调用 "),a("code",[t._v("clear()")]),t._v("​​​ 方法。")])]),t._v(" "),a("li",[a("p",[t._v("通过调用 "),a("code",[t._v("contains()")]),t._v("​​​ 方法可以确定一个类集中是否包含了一个指定的对象。")])]),t._v(" "),a("li",[a("p",[t._v("为了确定一个类集是否包含了另一个类集的全部元素，可以调用 "),a("code",[t._v("contsinsAll()")]),t._v("​​ 方法。")])]),t._v(" "),a("li",[a("p",[t._v("当一个类集是空的时候，可以通过调用 "),a("code",[t._v("isEmpty()")]),t._v("​​ 方法来予以确定。")])]),t._v(" "),a("li",[a("p",[t._v("调用 "),a("code",[t._v("size()")]),t._v("​​ 方法可以获得类集中当前元素的个数。")])]),t._v(" "),a("li",[a("p",[t._v("​"),a("code",[t._v("toArray()")]),t._v("​ 方法返回一个数组，这个数组包含了存储在调用类集中的元素。通过再类集合数组之间提供一条路径，可以充分利用这两者的优点。")])]),t._v(" "),a("li",[a("p",[t._v("一个更加重要的方法是 "),a("code",[t._v("iterator()")]),t._v("​ ，该方法对类集返回一个迭代程序。当使用一个类集框架时，迭代程序对于成功的编程来说是至关重要的。")])]),t._v(" "),a("li",[a("p",[t._v("​"),a("code",[t._v("Collection")]),t._v("​ ：集合层次中的根接口，JDK 没有提供这个接口的直接实现类。")])]),t._v(" "),a("li",[a("p",[t._v("​"),a("code",[t._v("Set")]),t._v("​ ：不能包含重复的元素。"),a("code",[t._v("SortedSet")]),t._v("​ 是一个按照升序排列元素的 "),a("code",[t._v("Set")]),t._v("​ 。")])]),t._v(" "),a("li",[a("p",[t._v("​"),a("code",[t._v("List")]),t._v("​ ：是一个有序的集合，可以包含重复的元素。提供了按照索引访问的方式。")])]),t._v(" "),a("li",[a("p",[t._v("​"),a("code",[t._v("Map")]),t._v("​ ：包含了 key-value 对。Map 不能包含重复的 key 。"),a("code",[t._v("SortedMap")]),t._v("​ 是一个按照升序排列 key 的 "),a("code",[t._v("Map")]),t._v("​ 。")])])]),t._v(" "),a("h2",{attrs:{id:"集合框架中的实现类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集合框架中的实现类"}},[t._v("#")]),t._v(" 集合框架中的实现类")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img1.terwer.space/api/public/20221023211650.png",alt:""}}),t._v("​")]),t._v(" "),a("h2",{attrs:{id:"list-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list-接口"}},[t._v("#")]),t._v(" List 接口")]),t._v(" "),a("ul",[a("li",[t._v("​"),a("code",[t._v("List")]),t._v("​​​ 接口扩展了 "),a("code",[t._v("Colection")]),t._v("​​​ 并声明存储一系列元素的类集的特性。使用一个基于零的下表，元素可以通过他们在列表中的位置被插入和访问。一个列表可以包含重复元素。")]),t._v(" "),a("li",[t._v("除了由 "),a("code",[t._v("Collection")]),t._v("​​​ 定义的方法之外，List 还定义了一些它自己的方法。再次注意当类集不能被修改时，其中分几种方法引发 UnsupportedOperationException 异常。当一个对象与另一个不兼容，例如当企图将一个不兼容的对象加入一个类集当中时，将产生 ClassCastException 异常。")]),t._v(" "),a("li",[t._v("对于由 "),a("code",[t._v("Collection")]),t._v("​​​ 定义的 "),a("code",[t._v("add()")]),t._v("​​​ 和 "),a("code",[t._v("addAll()")]),t._v("​​​ 方法，List 增加了方法 "),a("code",[t._v("add(int, Object)")]),t._v("​​​ 和 "),a("code",[t._v("addAll(int, Collection)")]),t._v("​​​。这些方法在指定的下标处插入元素。由 "),a("code",[t._v("Collection")]),t._v("​​​ 定义的 "),a("code",[t._v("add()")]),t._v("​​​ 和 "),a("code",[t._v("addAll()")]),t._v("​​​ 方法的语义也被 List 改变了，以便他们 "),a("strong",[t._v("在列表的尾部增加元素")]),t._v(" 。")]),t._v(" "),a("li",[t._v("为了获得在指定位置存储的对象，可以用对象的下标调用 "),a("code",[t._v("get()")]),t._v("​ 方法，为了给元素赋值，可以调用 "),a("code",[t._v("set()")]),t._v("​ 方法，指定被改变对象的下表。调用 "),a("code",[t._v("indexOf()")]),t._v("​ 和 "),a("code",[t._v("lastIndexOf()")]),t._v("​ 可以得到一个对象的下标。")]),t._v(" "),a("li",[t._v("通过调用 "),a("code",[t._v("subList()")]),t._v("​ 方法，可以获得列表的一个指定了开始下标和结束下标的子列表。"),a("code",[t._v("subList()")]),t._v("​ 方法使得列表处理十分方便。")])]),t._v(" "),a("h2",{attrs:{id:"set-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-接口"}},[t._v("#")]),t._v(" Set 接口")]),t._v(" "),a("ul",[a("li",[t._v("集合接口定义了一个集合。它扩展了 "),a("code",[t._v("Collection")]),t._v("​ 并说明了不允许重复元素的类集的特性。因此，如果试图将重复元素加到集合中时，add() 方法将返回 false 。它本身并没有定义任何的附加方法。")])]),t._v(" "),a("h2",{attrs:{id:"sortedset-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sortedset-接口"}},[t._v("#")]),t._v(" SortedSet 接口")]),t._v(" "),a("ul",[a("li",[t._v("​"),a("code",[t._v("SortedSet")]),t._v("​ 接口扩展了 "),a("code",[t._v("Set")]),t._v("​ 并说明了按照升序排列的集合的特性。当没有项包含在集合中时，其中的几种方法引发 NoSuchElementException 异常。当对象与调用集合中的元素不兼容时，引发 ClassCastException 异常。如果试图使用 null 对象，二集合不允许 null 时，引发 NullPointerException 异常。")]),t._v(" "),a("li",[t._v("​"),a("code",[t._v("SortedSet")]),t._v("​ 定义了几种方法，使得对集合的处理更加方便。调用 "),a("code",[t._v("first()")]),t._v("​ 方法，可以获得集合中的第一个对象。调用 "),a("code",[t._v("last()")]),t._v("​ 方法，可以获得集合中的最后一个元素。调用 "),a("code",[t._v("subset()")]),t._v("​ 方法，可以获得排序集合的一个指定了第一个和最后一个对象子集合。如果需要得到从集合的第一个元素开始的一个子集合。可以使用 "),a("code",[t._v("headSet()")]),t._v("​ 方法。如果需要获得集合尾部的一个子集合，可以使用 "),a("code",[t._v("tailSet()")]),t._v("​ 方法。")])]),t._v(" "),a("h2",{attrs:{id:"collection-类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#collection-类"}},[t._v("#")]),t._v(" Collection 类")]),t._v(" "),a("ul",[a("li",[t._v("类集接口的标准类一些提供了完整的可使用的工具，另一些是抽象的，提供主框架工具，最为创建具体类集的起始点。")])]),t._v(" "),a("h2",{attrs:{id:"arraylist"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arraylist"}},[t._v("#")]),t._v(" ArrayList")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("​"),a("code",[t._v("ArrayList")]),t._v("​​​ ：我们可以将其看做是能够自动增长容量的数组。")])]),t._v(" "),a("li",[a("p",[t._v("利用 "),a("code",[t._v("ArrayList")]),t._v("​​​ 的 "),a("code",[t._v("toArray()")]),t._v("​​​ 返回一个数组。")])]),t._v(" "),a("li",[a("p",[t._v("​"),a("code",[t._v("Arrays.asList()")]),t._v("​​​ 返回一个列表。")])]),t._v(" "),a("li",[a("p",[t._v("迭代器（Iterator）给我们提供了一种通用的方式来访问集合中的元素。")])]),t._v(" "),a("li",[a("p",[t._v("​"),a("code",[t._v("ArrayList")]),t._v("​ 继承自 "),a("code",[t._v("AbstractList")]),t._v("​ 并实现了 "),a("code",[t._v("List")]),t._v("​ 接口。")]),t._v(" "),a("p",[t._v("​"),a("code",[t._v("ArrayList")]),t._v("​ 支持可随需要增长的动态数组。在 Java 中，标准数组是定长的。在数组被创建后，它们不能被加长或者缩短，这意味着必须事先知道需要定义多大的数组。为了解决这个问题，类集框架定义了 "),a("code",[t._v("ArrayList")]),t._v("​ 。 "),a("strong",[t._v("本质上，ArrayList 是对象引用的一个变长数组")]),t._v(" 。也就是说，"),a("code",[t._v("ArrayList")]),t._v("​ 可以动态地增加或者减小其大小。"),a("code",[t._v("ArrayList")]),t._v("​ 以一个原始大小被创建，当超过了它的大小，类集自动增大。当对象被删除后，数组可以缩小。")])]),t._v(" "),a("li",[a("p",[t._v("​"),a("code",[t._v("ArrayList")]),t._v("​ 有如下的构造函数")]),t._v(" "),a("ul",[a("li",[t._v("​"),a("code",[t._v("ArrayList()")]),t._v("​")]),t._v(" "),a("li",[a("code",[t._v("ArrayList(Collection c)")]),t._v("​")]),t._v(" "),a("li",[a("code",[t._v("ArrayList(int capacity")]),t._v("​")]),t._v(" "),a("li",[t._v("第一个构造函数建立一个空的数组列表。")]),t._v(" "),a("li",[t._v("第二个构造函数建立一个数组列表，该数组列表由类集 "),a("code",[t._v("c")]),t._v("​ 中的元素初始化。")]),t._v(" "),a("li",[t._v("第三个构造函数建立一个数组列表，该数组有指定的初始容量（capacity）。容量是用于存储元素的基本数组的大小。当元素被追加到数组列表上时，容量会自动增加。")])])]),t._v(" "),a("li",[a("p",[t._v("尽管当对象被存储在 "),a("code",[t._v("ArrayList()")]),t._v("​​ 对象中时，其容量会自动增加。仍然可以通过 "),a("code",[t._v("ensureCapacity()")]),t._v("​​ 方法来人工地增加 "),a("code",[t._v("ArrayList")]),t._v("​​ 的容量。")]),t._v(" "),a("p",[t._v("如果事先知道将在当前能够容纳的类集中存储许多项时，可能会这么做。")]),t._v(" "),a("p",[t._v("在开始时，一次性增加它的容量，可以避免后面的再分配。因为再分配比较花时间，避免不必要的处理可以改善性能。")])]),t._v(" "),a("li",[a("p",[t._v("​"),a("code",[t._v("ensureCapacity()")]),t._v("​ 方法如下")]),t._v(" "),a("ul",[a("li",[t._v("​"),a("code",[t._v("void ensureCapacity(int cap)")]),t._v("​ ，这里，cap 是新的容量")])])]),t._v(" "),a("li",[a("p",[t._v("相反的，如果想要减小在 "),a("code",[t._v("ArrayList")]),t._v("​ 对象之下的数组的大小，以便它有真正正好容纳当前项的大小，可以调用 "),a("code",[t._v("trimToSize()")]),t._v("​ 方法。该方法如下：")]),t._v(" "),a("p",[t._v("​"),a("code",[t._v("void trimToSize()")]),t._v("​")])])]),t._v(" "),a("h2",{attrs:{id:"linkedlist"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linkedlist"}},[t._v("#")]),t._v(" LinkedList")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("​"),a("code",[t._v("LinkedList")]),t._v("​ 类继承自 "),a("code",[t._v("AbstractSequentialList")]),t._v("​ 并实现了 "),a("code",[t._v("List")]),t._v("​ 接口。他提供了一个 链表 数据结构。")]),t._v(" "),a("p",[t._v("它具有两个狗在函数，说明如下：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("LinkedList()")]),t._v("​")]),t._v(" "),a("li",[a("code",[t._v("LinkedList(Collection c)")]),t._v("​")]),t._v(" "),a("li",[t._v("第一个构造函数建立一个空的链表")]),t._v(" "),a("li",[t._v("第二个构造函数建立一个链表，该链表由类集 c 中的元素初始化。")])])]),t._v(" "),a("li",[a("p",[t._v("除了它继承的方法之外，"),a("code",[t._v("LinkedList")]),t._v("​ 类本身还定义了一些有用的方法，这些方法主要用于操作和访问列表。")]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("addFirst()")]),t._v("​ 方法可以在列表头增加元素；使用 "),a("code",[t._v("addLast()")]),t._v("​ 可以在列表的尾部增加元素。")]),t._v(" "),a("p",[t._v("它们的形式如下：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("void addFirst(Object obj)")]),t._v("​")]),t._v(" "),a("li",[a("code",[t._v("void addLast(Object obj)")]),t._v("​")]),t._v(" "),a("li",[t._v("这里，obj 是被增加的项")])])]),t._v(" "),a("li",[a("p",[t._v("调用 "),a("code",[t._v("getFirst()")]),t._v("​ 方法可以获得第一个元素。调用 "),a("code",[t._v("getLast()")]),t._v("​ 可以获得最后一个元素。")]),t._v(" "),a("p",[t._v("它们的形式如下：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Object getFirst()")]),t._v("​")]),t._v(" "),a("li",[a("code",[t._v("Object getLast()")]),t._v("​")])])]),t._v(" "),a("li",[a("p",[t._v("为了删除第一个元素，可以使用 "),a("code",[t._v("removeFirst()")]),t._v("​​ 方法；为了删除最后一个元素，可以调用 "),a("code",[t._v("removeLast()")]),t._v("​​ 方法。")]),t._v(" "),a("p",[t._v("他们的形式如下：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("​"),a("code",[t._v("Object removeFirst()")]),t._v("​​​")])]),t._v(" "),a("li",[a("p",[t._v("​"),a("code",[t._v("Object removeLast()")]),t._v("​​​")])]),t._v(" "),a("li",[a("p",[t._v("示例 1")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedList")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedListTest1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedList")]),t._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\tlist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"F"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tlist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"B"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tlist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"D"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tlist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"E"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tlist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"C"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\tlist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addLast")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Z"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tlist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addFirst")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\tlist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"最初的集合："')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\tlist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"F"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tlist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"变化之后的集合："')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tlist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"changed"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"最后的集合："')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br")])]),a("p",[t._v("因为 "),a("code",[t._v("LinkedList")]),t._v("​​ 实现 "),a("code",[t._v("List")]),t._v("​​ 接口，调用 "),a("code",[t._v("add(Object)")]),t._v("​​ 将项目追加到列表的尾部，如同 "),a("code",[t._v("addLast()")]),t._v("​​ 方法所做的那样。")]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("add()")]),t._v("​​ 方法的 "),a("code",[t._v("add(int, Object)")]),t._v("​​ 形式，插入项目到指定的位置，例如上面例子的 "),a("code",[t._v('add(1, "A2")')]),t._v("​​")]),t._v(" "),a("p",[t._v("注意如何通过调用 "),a("code",[t._v("get()")]),t._v("​​ 和 "),a("code",[t._v("set()")]),t._v("​​ 方法而使得 "),a("code",[t._v("LinkedList")]),t._v("​​ 中的第三个元素发生了改变。为了获得一个元素的当前值，通过 "),a("code",[t._v("get()")]),t._v("​​ 方法传递存储元素的下标值。为了对这个下标位置赋一个新值，通过 "),a("code",[t._v("set()")]),t._v("​​ 传递对应的下标和新值。")])]),t._v(" "),a("li",[a("p",[t._v("运行结果")]),t._v(" "),a("div",{staticClass:"language-plaintext line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-plaintext"}},[a("code",[t._v("最初的集合：[A, A2, F, B, D, E, C, Z]\n变化之后的集合：[A, A2, D, E, C, Z]\n最后的集合：[A, A2, Dchanged, E, C, Z]\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])])])])]),t._v(" "),a("li",[a("p",[t._v("​"),a("code",[t._v("LinkedList")]),t._v("​​ ​是采用双向循环列表实现的。")])]),t._v(" "),a("li",[a("p",[t._v("利用 LinkedList 实现栈(stack)、队列 (queue)、双向队列(double-ended queue )。")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);