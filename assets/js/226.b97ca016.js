(window.webpackJsonp=window.webpackJsonp||[]).push([[226],{816:function(s,t,a){"use strict";a.r(t);var e=a(2),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("ol",[a("li",[a("p",[s._v("如果一个类包含了属性与方法，那么该类的每一个对象都具有自己的属性，但无论一个类有多少个对象，这些对象共享同一个方法。")])]),s._v(" "),a("li",[a("p",[s._v("关于方法参数传递的总结：对于 Java 中的方法参数传递，无论传递的是原生数据类型还是引用类型，统一是传值（"),a("code",[s._v("pass by value")]),s._v("​）。")])]),s._v(" "),a("li",[a("p",[s._v("什么类型的引用就能指向什么类型的对象，比如 People 类型的引用就能指向 People 类型的对象，但不能指向 Student 类型的对象。比如：")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" people "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("People")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 正确")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" people "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Student")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//错误")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("People")]),s._v(" people "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("People")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 正确")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("People")]),s._v(" people "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Student")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//错误")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("构造方法（"),a("code",[s._v("Constructor")]),s._v("​）：构造方法用于完成对象属性的初始化工作，构造方法的特点：")]),s._v(" "),a("p",[s._v("a) 构造方法的名字必须与类名完全一致（包含大小写）")]),s._v(" "),a("p",[s._v("b) 构造方法没有返回值，连 "),a("code",[s._v("void")]),s._v(" 也不能出现。")]),s._v(" "),a("p",[s._v("c) 如果在定义一个类的时候，没有为类声明构造方法，那么 Java 编译器会自动为类添加一个没有参数且方法体为空的构造方法（默认的构造方法）")]),s._v(" "),a("p",[s._v("d) 如果在定义一个类的时候，为类声明了构造方法，那么 Java 编译器就不会再为类添加构造方法了。")]),s._v(" "),a("p",[s._v("e) 不能显式调用类的构造方法，构造方法通常是通过 new 关键字隐式调用。")])]),s._v(" "),a("li",[a("p",[s._v("new 关键字在生成对象时完成了三件事情：")]),s._v(" "),a("p",[s._v("a) 为对象开辟内存空间。")]),s._v(" "),a("p",[s._v("b) 调用类的构造方法。")]),s._v(" "),a("p",[s._v("c) 将生成的对象的地址返回。")])]),s._v(" "),a("li",[a("p",[s._v("默认的构造方法：构造方法没有参数且方法体为空。")])]),s._v(" "),a("li",[a("p",[s._v("使用 "),a("code",[s._v("new")]),s._v("​ 来生成对象的时候，后面的小括号()表示构造方法的参数列表，如果构造方法不接收参数，那么小括号中的内容为空；如果构造方法接收参数，那么小括号中的实际参数就需要与构造方法定义中的形式参数保持一致（参数数量一致、参数类型一致、按照顺序逐一赋值）。")])])]),s._v(" "),a("blockquote",[a("p",[s._v("文章更新历史")]),s._v(" "),a("p",[s._v("2022/05/08 feat:新增 Kotlin 语法支持。")]),s._v(" "),a("p",[s._v("2022/05/08 fix:修改备注。")])])])}),[],!1,null,null,null);t.default=n.exports}}]);